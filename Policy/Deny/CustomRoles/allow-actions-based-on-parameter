{
    "properties": {
      "displayName": "allow-actions-based-on-parameter",
      "policyType": "Custom",
      "mode": "All",
      "parameters": {
        "effect": {
          "type": "String",
          "metadata": {
            "displayName": "Effect",
            "description": "Deny policy or disable policy"
          },
          "defaultValue": "Deny"
        },
        "actions": {
          "type": "Array",
          "metadata": {
            "displayName": "Allowed Perms",
            "description": "Array of permissions to allow. When entering parameters in the portal add the permissions without the double quotes seperated by a comma. - Ex Microsoft.Authorization/elevateAccess/Action"
          }
        }
      },
      "policyRule": {
        "if": {
          "allOf": [
            {
              "field": "type",
              "equals": "Microsoft.Authorization/roleDefinitions"
            },
            {
              "field": "Microsoft.Authorization/roleDefinitions/type",
              "equals": "CustomRole"
            },
            {
              "anyOf": [
                {
                  "value": "[if(empty(field('Microsoft.Authorization/roleDefinitions/permissions[*].actions[*]')), bool('false'), equals(length(intersection(parameters('actions'), field('Microsoft.Authorization/roleDefinitions/permissions[*].actions[*]'))), length(parameters('actions'))))]",
                  "equals": false
                },
                {
                  "value": "[if(empty(field('Microsoft.Authorization/roleDefinitions/permissions[*].actions[*]')), bool('false'), equals(length(field('Microsoft.Authorization/roleDefinitions/permissions[*].actions[*]')),length(parameters('actions'))))]",
                  "equals": false
                }
              ]
            }
          ]
        },
        "then": {
          "effect": "[parameters('effect')]"
        }
      }
    }
  }
